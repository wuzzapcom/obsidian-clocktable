/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  __markAsModule(target);
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && key !== "default")
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toModule = (module2) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", module2 && module2.__esModule && "default" in module2 ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// main.ts
__export(exports, {
  default: () => ObsidianClocktable
});
var import_obsidian = __toModule(require("obsidian"));
var DEFAULT_SETTINGS = {
  pathToDailyNotes: "daily"
};
var taskFormatRegexp = /- (\[\d\d:\d\d\]) (.+ )?(:.+:)(.*)?/;
var ObsidianClocktable = class extends import_obsidian.Plugin {
  onload() {
    return __async(this, null, function* () {
      yield this.loadSettings();
      this.addSettingTab(new ObsidianClocktableSettingsTab(this.app, this));
      this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
      this.addCommand({
        id: "insert-clocktable-report",
        name: "Insert clocktable report",
        editorCallback: (editor, view) => {
          new EnterReportIntervalsModal(this.app, (s, f) => {
            prepareReport(this.app, s, f, this.settings.pathToDailyNotes, (text) => {
              editor.replaceRange(text, editor.getCursor());
            });
          }).open();
        }
      });
      this.addCommand({
        id: "add-5-minutes",
        name: "Add 5 minutes to current task",
        editorCallback: (editor, view) => {
          let l = editor.getLine(editor.getCursor().line);
          let replacedLine = changeTaskTimeToDelta(5, "minute", l);
          editor.setLine(editor.getCursor().line, replacedLine);
        },
        hotkeys: [{ modifiers: ["Mod", "Shift"], key: "k" }]
      });
      this.addCommand({
        id: "sub-5-minutes",
        name: "Sub 5 minutes to current task",
        editorCallback: (editor, view) => {
          let l = editor.getLine(editor.getCursor().line);
          let replacedLine = changeTaskTimeToDelta(-5, "minute", l);
          editor.setLine(editor.getCursor().line, replacedLine);
        },
        hotkeys: [{ modifiers: ["Mod", "Shift"], key: "j" }]
      });
      this.addCommand({
        id: "insert-black-task-line",
        name: "Insert line with black task",
        editorCallback: (editor, view) => {
          let curTime = moment();
          curTime.subtract(curTime.minute() % 5, "minute");
          let cur = editor.getCursor().line;
          editor.setLine(cur, editor.getLine(editor.getCursor().line) + `
- [${curTime.format("HH:mm")}] :ex:`);
        },
        hotkeys: [{ modifiers: ["Mod", "Shift"], key: "l" }]
      });
    });
  }
  onunload() {
  }
  loadSettings() {
    return __async(this, null, function* () {
      this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
    });
  }
  saveSettings() {
    return __async(this, null, function* () {
      yield this.saveData(this.settings);
    });
  }
};
var EnterReportIntervalsModal = class extends import_obsidian.Modal {
  constructor(app, c) {
    super(app);
    this.start = moment().format("YYYY-MM-DD");
    this.finish = moment().format("YYYY-MM-DD");
    this.callback = c;
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.createEl("h1", { text: "Obsidian Clocktable" });
    contentEl.createEl("h2", { text: "Report interval(YYYY-MM-DD format)" });
    new import_obsidian.Setting(contentEl).setName("start date").addText((text) => text.setValue(this.start).onChange((value) => {
      this.start = value;
    }));
    new import_obsidian.Setting(contentEl).setName("finish date").addText((text) => text.setValue(this.finish).onChange((value) => {
      this.finish = value;
    }));
    new import_obsidian.Setting(contentEl).addButton((btn) => btn.setButtonText("Submit").setCta().onClick(() => {
      let start = this.parseDate(this.start);
      let finish = this.parseDate(this.finish);
      if (start == null || finish == null) {
        return;
      }
      if (start.isAfter(finish)) {
        this.invalidInputNotice("start should be < finish");
        return;
      }
      this.close();
      this.callback(start, finish);
    }));
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  parseDate(input) {
    if (input == null || input.length != 10 && input[4] != "-" && input[7] != "-") {
      this.invalidInputNotice(input);
      this.close();
      return null;
    }
    let date = moment(input, "YYYY-MM-DD");
    if (!date.isValid) {
      this.close();
      this.invalidInputNotice(input);
      return null;
    }
    return date;
  }
  invalidInputNotice(v) {
    new import_obsidian.Notice("Invalid value: " + v);
  }
};
var ObsidianClocktableSettingsTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Obsidian Clocktable" });
    new import_obsidian.Setting(containerEl).setName("Path to daily folder").setDesc("Enter path will be used to find your daily notes with tasks").addText((text) => text.setPlaceholder("daily").setValue(this.plugin.settings.pathToDailyNotes).onChange((value) => __async(this, null, function* () {
      this.plugin.settings.pathToDailyNotes = value;
      yield this.plugin.saveSettings();
    })));
  }
};
function prepareReport(app, start, finish, dailyPath, onComplete) {
  return __async(this, null, function* () {
    var files = app.vault.getFiles();
    var targetFilenames = generateFilenamesInInterval(start, finish);
    let contentPromises = files.filter((v, i, arr) => {
      return v.parent.name == dailyPath && targetFilenames.includes(v.name);
    }).map((v, i, arr) => {
      return app.vault.read(v);
    });
    let contents = yield Promise.all(contentPromises);
    if (contents.length == 0) {
      new import_obsidian.Notice("No files to open, check selected interval or path to notes in settings");
      return;
    }
    var taskDurations = new Map();
    contents.forEach((v, i, arr) => calculateDurations(taskDurations, v));
    let report = "";
    taskDurations.forEach((v, k, m) => {
      report += `${k} => ${moment.duration(v, "seconds").toISOString().substring(2)}
`;
    });
    onComplete(report);
  });
}
function calculateDurations(taskDurations, content) {
  let lines = content.split("\n");
  var prevTime;
  for (var l of lines.reverse()) {
    let m = l.match(taskFormatRegexp);
    if (m == null) {
      if (l.startsWith("- [") && l.contains(":")) {
        new import_obsidian.Notice(`Line not matched regexp but seems similar to format, please check for typos: "${l}"`);
      }
      continue;
    }
    let time = moment(m[1].substring(1, m[1].length - 1), "HH:mm");
    let taskName = m[3];
    if (prevTime == null) {
      prevTime = time;
      continue;
    }
    var dur = 0;
    if (taskDurations.has(taskName)) {
      dur = taskDurations.get(taskName);
    }
    dur += prevTime.diff(time, "seconds");
    taskDurations.set(taskName, dur);
    prevTime = time;
  }
}
function generateFilenamesInInterval(start, finish) {
  var res = [];
  let formatFilename = (m) => {
    return m.format("YYYY-MM-DD") + ".md";
  };
  for (let cur = start; cur.format("YYYY-MM-DD") != finish.format("YYYY-MM-DD"); cur = cur.add(1, "day")) {
    res.push(formatFilename(cur));
  }
  res.push(formatFilename(finish));
  return res;
}
function changeTaskTimeToDelta(val, unit, l) {
  let m = l.match(taskFormatRegexp);
  if (m == null) {
    new import_obsidian.Notice("given line has wrong format");
    return;
  }
  let time = moment(m[1].substring(1, m[1].length - 1), "HH:mm");
  time = time.add(val, unit);
  return `- [${time.format("HH[:]mm")}] ${l.substring(10)}`;
}
//# sourceMappingURL=data:application/json;base64,
